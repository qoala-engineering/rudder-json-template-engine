declare function startsWithStrict(val1: any, val2: any): string;
declare function startsWith(val1: any, val2: any): string;
declare function endsWithStrict(val1: any, val2: any): string;
declare function endsWith(val1: any, val2: any): string;
declare function contains(val1: any, val2: any): string;
export declare const binaryOperators: {
    '===': (val1: any, val2: any) => string;
    '==': (val1: any, val2: any) => string;
    '>=': (val1: any, val2: any) => string;
    '>': (val1: any, val2: any) => string;
    '<=': (val1: any, val2: any) => string;
    '<': (val1: any, val2: any) => string;
    '!==': (val1: any, val2: any) => string;
    '!=': (val1: any, val2: any) => string;
    '^==': typeof startsWithStrict;
    '==^': (val1: any, val2: any) => string;
    '^=': typeof startsWith;
    '=^': (val1: any, val2: any) => string;
    '$==': typeof endsWithStrict;
    '==$': (val1: any, val2: any) => string;
    '$=': typeof endsWith;
    '=$': (val1: any, val2: any) => string;
    '=~': (val1: any, val2: any) => string;
    contains: typeof contains;
    '==*': (val1: any, val2: any) => string;
    '=*': (val1: any, val2: any) => string;
    size: (val1: any, val2: any) => string;
    empty: (val1: any, val2: any) => string;
    subsetof: (val1: any, val2: any) => string;
    anyof: (val1: any, val2: any) => string;
    '+': (val1: any, val2: any) => string;
    '-': (val1: any, val2: any) => string;
    '*': (val1: any, val2: any) => string;
    '/': (val1: any, val2: any) => string;
    '%': (val1: any, val2: any) => string;
    '>>': (val1: any, val2: any) => string;
    '<<': (val1: any, val2: any) => string;
    '**': (val1: any, val2: any) => string;
};
export declare const standardFunctions: {
    sum: string;
    max: string;
    min: string;
    avg: string;
    length: string;
    stddev: string;
    first: string;
    last: string;
    index: string;
    keys: string;
};
export declare function isStandardFunction(name: string): boolean;
export {};
//# sourceMappingURL=operators.d.ts.map